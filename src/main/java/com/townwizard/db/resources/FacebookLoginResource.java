package com.townwizard.db.resources;

import java.net.URL;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.townwizard.db.model.LoginRequest;
import com.townwizard.db.model.User;
import com.townwizard.db.services.UserService;
import com.townwizard.db.util.HttpUtils;

/**
 * Contains a REST resource to facilitate Facebook login
 */
@Component
@Path("/login")
public class FacebookLoginResource extends UserResource {
    
    private static final String FB_APP_ID = "373685232723588";
    private static final String FB_APP_SECRET = "d9c84a8e96b422fe8075360a8415f584";
    private static final String FB_LOGIN_RESOURCE = "http://www.townwizardconnect.com/login/fb";
    private static final String PHP_LOGIN_PATH = "/townwizard-db-api/fb-login.php";
  
    @Autowired
    private UserService userService;
    
    /**
     * Handles requests generated by the Facebook login workflow.  The requests come from Facebook
     * as well as the original partner site.
     * 
     * The parameters passed to this service define its behavior.  The available parameters are:
     *  - code        An access code generated by Facebook, necessary to retrieve private user data
     *  - state       An intermediate UUID token necessary to recognize subsequent calls to the service.
     *                This token is generated by the service, passed to Facebook, and then passed by 
     *                Facebook back to the service.
     *  - location    An original partner URL from which the user is logging into Facebook
     *  - userId      The user DB ID as it exists in the Townwizard DB
     *  
     * Three different calls can be made to this service during the Facebook login workflow.
     * 
     * Call 1: 
     * 
     * Happens when a user clicks on the facebook login button on the partner site page.
     * At this point no state, access code, or user id is known.  The partner site will pass the
     * original location only as a GET parameter.  This call is handled by generating the unique 
     * state and sending it to the facebook authentication URL
     * 
     * Call 2:
     * 
     * Happens when the user clicks cancel on the facebook login window. This call will be handled
     * by sending Javascript back which will close the facebook popup window.
     * 
     * Call 3:
     * 
     * Happens when the user proceeds with login, or when the user is already logged in Facebook, and
     * Facebook realizes that fact (successful login).  This call comes from Facebook and it contains
     * the access code and the state (login request id) passed back from Facebook.
     * 
     * Upon receiving this call, the service will make another back-end call to facebook in order to
     * retrieve user data (now that the service has a valid access code it can do it). When the user
     * data is retrieved, the user is created/updated in the Townwizard DB database.
     * 
     * After that, it's necessary to redirect the popup window back to the partner site, otherwise
     * it would not by possible to refresh the main browser window due to the browser security
     * restrictions.
     * 
     * This is done by sending a javascript tag to the popup.
     * 
     * The original location and the user id are passed to the partner site, and it will close
     * the popup and redirect to the original url.
     */
    @GET
    @Path("/fb")
    @Produces(MediaType.TEXT_HTML)
    public Response loginWithFacebook(
            @QueryParam("code") String code,
            @QueryParam("state") String loginRequestId,
            @QueryParam("l") String location,
            @QueryParam("uid") Integer userId) {
        try {
            //Handle call 1 made by partner site.  Partner sends the location.
            //Generate request id (state)
            //Save login request in the DB
            //Call facebook authentication url and pass it the generated state
            //Give facebook my url as a redirect url
            if(code == null && loginRequestId == null && userId == null && location != null) {                
                String lRequestId = UUID.randomUUID().toString();
                userService.createLoginRequest(new LoginRequest(lRequestId, location, new Date()));                
                
                StringBuilder dialogUrl = new StringBuilder();
                dialogUrl.append("https://www.facebook.com/dialog/oauth?");
                dialogUrl.append("client_id=").append(FB_APP_ID);
                dialogUrl.append("&redirect_uri=").append(FB_LOGIN_RESOURCE);
                dialogUrl.append("&state=").append(lRequestId);
                dialogUrl.append("&display=popup");
                dialogUrl.append("&scope=email");
                String html = getJavaScriptHtml("window.location.href='" + dialogUrl.toString() + "'");
                
                return Response.status(Status.OK).entity(html).build();
            }
            
            //Handle call 2 which is a facebook redirect when the user cancels the login
            //Response with Javascript which will close the facebook dialog window
            if(code == null && loginRequestId != null && userId == null && location == null) {
                String html = getJavaScriptHtml("window.close();");
                return Response.status(Status.OK).entity(html).build();
            }
            
            //Handle call 3 when the Facebook login is successful
            //Make an internal call to facebook to get user data
            //Save user data in the DB
            //Response with Javascript to redirect to myself with the valid user id and location
            LoginRequest lRequest;
            if(code != null && (lRequest = userService.getLoginRequest(loginRequestId)) != null) {
                StringBuilder tokenUrl = new StringBuilder();
                tokenUrl.append("https://graph.facebook.com/oauth/access_token?");
                tokenUrl.append("client_id=").append(FB_APP_ID);
                tokenUrl.append("&redirect_uri=").append(FB_LOGIN_RESOURCE);
                tokenUrl.append("&client_secret=").append(FB_APP_SECRET);
                tokenUrl.append("&code=").append(code);
                
                String response = HttpUtils.executeGetRequest(tokenUrl.toString());
                Map<String, String> accessInfo = parseAcessTokenResponse(response);
                String accessToken = accessInfo.get("access_token");            
                 
                String userUrl = "https://graph.facebook.com/me?access_token=" + accessToken;
                String userData = HttpUtils.executeGetRequest(userUrl);
                 
                Map<String, Object> fbUser = parseJson(userData);
                User u = User.fromFbUser(fbUser);
                createOrUpdateExternalUser(u);
                
                String server = getServerPartFromLocationUrl(lRequest.getLocation());
                
                StringBuilder javaScript = new StringBuilder();
                javaScript.append("window.location.href='").append(server).append(PHP_LOGIN_PATH)
                    .append("?uid=").append(u.getId()).append("&l=").append(lRequest.getLocation()).append("';");
                String html = getJavaScriptHtml(javaScript.toString());
                return Response.status(Status.OK).entity(html).build();
            }          
        } catch(Exception e) {
            handleGenericException(e);
        }
        
        return Response.status(Status.BAD_REQUEST).build();
    }
    
    private String getJavaScriptHtml(String javaScript) {
        StringBuffer html = new StringBuffer();
        html.append("<!DOCTYPE HTML>");
        html.append("<html><head><meta charset=\"UTF-8\"><meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\"></head><body><script>");
        html.append(javaScript);
        html.append("</script></body></html>");
        return html.toString();
    }
    
    private Map<String, String> parseAcessTokenResponse(String s) {
        //translate the line below into map
        //access_token=AAAFT3VZBN5oQBAOqIik79TCYlzoJLBjtbZA5f3emRu5g0V37E6q5FR0t30sZBsAi3lQgY6ZBnIoxJZCMocr80zjgrkmBWyJtDvUrugshGjwZDZD&expires=5183326
        Map<String, String> result = new HashMap<>();
        String[] data = s.split("&");
        if(data.length == 2) {
            for(String str : data) {
                String[] entry = str.split("=");
                if(entry.length == 2) {
                    result.put(entry[0], entry[1]);
                }
            }
        }
        
        if(result.size() == 2) return result;
        return Collections.emptyMap();
    }
    
    private String getServerPartFromLocationUrl(String location) {
        try {
            URL url = new URL(location);
            String retVal = url.getProtocol() + "://" + url.getHost();
            return retVal;
        } catch (Exception e) {
            handleGenericException(e);
            return null;
        }
    }
    
    
    //TODO: implement login request cleanup job
}
